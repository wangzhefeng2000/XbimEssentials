// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.GeometryResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcDistanceExpression
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcDistanceExpression : IIfcGeometricRepresentationItem
	{
		IfcLengthMeasure @DistanceAlong { get;  set; }
		IfcLengthMeasure? @OffsetLateral { get;  set; }
		IfcLengthMeasure? @OffsetVertical { get;  set; }
		IfcLengthMeasure? @OffsetLongitudinal { get;  set; }
		IfcBoolean? @AlongHorizontal { get;  set; }
	
	}
}

namespace Xbim.Ifc4.GeometryResource
{
	[ExpressType("IfcDistanceExpression", 1348)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcDistanceExpression : IfcGeometricRepresentationItem, IInstantiableEntity, IIfcDistanceExpression, IEquatable<@IfcDistanceExpression>
	{
		#region IIfcDistanceExpression explicit implementation
		IfcLengthMeasure IIfcDistanceExpression.DistanceAlong { 
 
			get { return @DistanceAlong; } 
			set { DistanceAlong = value;}
		}	
		IfcLengthMeasure? IIfcDistanceExpression.OffsetLateral { 
 
			get { return @OffsetLateral; } 
			set { OffsetLateral = value;}
		}	
		IfcLengthMeasure? IIfcDistanceExpression.OffsetVertical { 
 
			get { return @OffsetVertical; } 
			set { OffsetVertical = value;}
		}	
		IfcLengthMeasure? IIfcDistanceExpression.OffsetLongitudinal { 
 
			get { return @OffsetLongitudinal; } 
			set { OffsetLongitudinal = value;}
		}	
		IfcBoolean? IIfcDistanceExpression.AlongHorizontal { 
 
			get { return @AlongHorizontal; } 
			set { AlongHorizontal = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcDistanceExpression(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcLengthMeasure _distanceAlong;
		private IfcLengthMeasure? _offsetLateral;
		private IfcLengthMeasure? _offsetVertical;
		private IfcLengthMeasure? _offsetLongitudinal;
		private IfcBoolean? _alongHorizontal;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 3)]
		public IfcLengthMeasure @DistanceAlong 
		{ 
			get 
			{
				if(_activated) return _distanceAlong;
				Activate();
				return _distanceAlong;
			} 
			set
			{
				SetValue( v =>  _distanceAlong = v, _distanceAlong, value,  "DistanceAlong", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 4)]
		public IfcLengthMeasure? @OffsetLateral 
		{ 
			get 
			{
				if(_activated) return _offsetLateral;
				Activate();
				return _offsetLateral;
			} 
			set
			{
				SetValue( v =>  _offsetLateral = v, _offsetLateral, value,  "OffsetLateral", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 5)]
		public IfcLengthMeasure? @OffsetVertical 
		{ 
			get 
			{
				if(_activated) return _offsetVertical;
				Activate();
				return _offsetVertical;
			} 
			set
			{
				SetValue( v =>  _offsetVertical = v, _offsetVertical, value,  "OffsetVertical", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 6)]
		public IfcLengthMeasure? @OffsetLongitudinal 
		{ 
			get 
			{
				if(_activated) return _offsetLongitudinal;
				Activate();
				return _offsetLongitudinal;
			} 
			set
			{
				SetValue( v =>  _offsetLongitudinal = v, _offsetLongitudinal, value,  "OffsetLongitudinal", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 7)]
		public IfcBoolean? @AlongHorizontal 
		{ 
			get 
			{
				if(_activated) return _alongHorizontal;
				Activate();
				return _alongHorizontal;
			} 
			set
			{
				SetValue( v =>  _alongHorizontal = v, _alongHorizontal, value,  "AlongHorizontal", 5);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_distanceAlong = value.RealVal;
					return;
				case 1: 
					_offsetLateral = value.RealVal;
					return;
				case 2: 
					_offsetVertical = value.RealVal;
					return;
				case 3: 
					_offsetLongitudinal = value.RealVal;
					return;
				case 4: 
					_alongHorizontal = value.BooleanVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcDistanceExpression other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}